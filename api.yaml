openapi: 3.0.0
info:
  title: User and Task Management API
  version: 1.0.0
  description: API for managing users and their tasks with role-based access control.
servers:
  - url: http://localhost:4000/api
    description: Local server

paths:
  /user/create:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - firstName
                - lastName
                - username
                - email
                - password
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Username or email already exists.
        '500':
          description: Internal server error.

  /user/update/{id}:
    put:
      summary: Update user information
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
                email:
                  type: string
                  format: email
              required:
                - firstName
                - lastName
                - username
                - email
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
        '400':
          description: Username or email already exists.
        '500':
          description: Internal server error.

  /user/{userId}/tasks:
    get:
      summary: List tasks for a specific user with pagination and sorting.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user whose tasks to list.
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination.
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of tasks per page.
          schema:
            type: integer
            default: 10
        - name: sortOrder
          in: query
          description: Sort order (ASC or DESC).
          schema:
            type: string 
            enum:
              - ASC 
              - DESC 
            default : DESC 
      responses:
        '200':
          description: A list of tasks for the specified user.
          content:
            application/json:
              schema:
                type : object 
                properties : 
                  totalTasks :
                    type : integer 
                  totalPages :
                    type : integer 
                  currentPage :
                    type : integer 
                  tasks :
                    type : array 
                    items : 
                      $ref : '#/components/schemas/Task'
        '404':
          description : User not found. 
        '500':
          description : Internal server error.

  /admin/tasks:
    get:
      summary: List all tasks with pagination and sorting (Admin only).
      parameters:
        - name: page
          in: query
          description : Page number for pagination.
          schema :
            type : integer 
            default : 1 
        - name : limit 
          in : query 
          description : Number of tasks per page.
          schema :
            type : integer 
            default : 10 
        - name : sortOrder 
          in : query 
          description : Sort order (ASC or DESC).
          schema :
            type : string 
            enum :
              - ASC 
              - DESC 
            default : DESC  
      responses :
        '200' :
           description : A list of all tasks with pagination.
           content :
             application/json :
               schema :
                 type : object  
                 properties :
                   totalTasks :
                     type : integer  
                   totalPages :
                     type : integer  
                   currentPage :
                     type : integer  
                   tasks :
                     type : array  
                     items :
                       $ref : '#/components/schemas/Task'  
        '500' :
           description : Internal server error.

  /admin/tasks/{taskId}:
    put:
      summary: Update a task by admin.
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID of the task to update.
          schema:
            type: string      
      requestBody:
        required:true    
        content :
           application/json :
             schema :
               # Define the properties of the task to be updated here...
               $ref:'#/components/schemas/Task'  
      responses:
        '200':
           description:'Task updated successfully.'
           content :
             application/json :
               schema :
                 $ref:'#/components/schemas/Task'  
        '404':
           description:'Task not found.'
        '500':
           description:'Internal server error.'

  /admin/tasks/{taskId}:
    delete:
      summary:'Delete a task by admin.'
      parameters :
       - name:'taskId'
         in:'path'
         required:true    
         description:'ID of the task to delete.'
         schema:{type:'string'}    
      responses:{
         '204':{description:'Task deleted successfully.'}
         '404':{description:'Task not found.'}
         '500':{description:'Internal server error.'}
       }

components:

  schemas:

    User:

      type:'object'
      properties:

       id:

         type:'integer'

       firstName:

         type:'string'

       lastName:

         type:'string'

       username:

         type:'string'

       email:

         type:'string'

       password:

         type:'string'

       role:

         type:'string'

         enum:['basic', 'admin']

    Task:

      type:'object'
      properties:

       id:

         type:'integer'

       title:

         type:'string'

       description:

         type:'string'

       userId:

         type:'integer'

       createdAt:

         type:'string'

         format:'date-time'

       updatedAt:

         type:'string'

         format:'date-time'